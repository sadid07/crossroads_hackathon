{"version":3,"sources":["components/ReactDropDown.jsx","App.js","serviceWorker.js","index.js"],"names":["DropdownMultiple","placeholder","isSingle","labelName","selectedList","selectedlabelName","toggleItem","list","inputChanged","searchKey","tagColor","selectedDropdownColor","useState","listOpen","setListOpen","input","setInput","internalSelectedList","setInternanSelectedList","internalList","setInternalList","useEffect","tmpSelectedList","concat","length","Set","changeListValueBasedOnSearch","value","tmpArray","filter","val","toUpperCase","includes","close","timeOut","window","removeEventListener","selectedClassname","item","some","renderDropDownSelectedItem","index","key","className","style","seletedBackgroundColor","onClick","totalSelectedItem","splice","indexOf","push","dropDownSelectedItem","backgroundColor","styles","container","padding","margin","items","color","display","border","borderRadius","cursor","outline","fontSize","onMouseEnter","onMouseLeave","addEventListener","marginTop","map","i","paddingLeft","onChange","evt","inputValue","target","e","stopPropagation","renderDropDownFn","App","name","singleSearchKey","setSingleSearchKey","singleSelectedValue","setSingleSelectedValue","multiSearchKey","setMultiSearchKey","multiSelectedValue","setMultiSelectedValue","handleInputChange","ReactDropDown","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67fd474a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./styles/global.css\";\n\nconst DropdownMultiple = ({\n  placeholder = \"Search\",\n  isSingle = false,\n  labelName = \"title\",\n  selectedList = [],\n  selectedlabelName = \"title\",\n  toggleItem = {},\n  list = [],\n  inputChanged = {},\n  searchKey= \"\",\n  tagColor= \"#0074D9\",\n  selectedDropdownColor = \"#0074D9\"\n}) => {\n  const [listOpen, setListOpen] = useState(false);\n  const [input, setInput] = useState(\"\");\n  const [internalSelectedList, setInternanSelectedList] = useState([]);\n  const [internalList, setInternalList] = useState([])\n\n  useEffect(() => {\n    let tmpSelectedList = [];\n    tmpSelectedList = [...internalSelectedList];\n    tmpSelectedList = tmpSelectedList.concat(selectedList);\n    if (tmpSelectedList.length > 0) {\n      setInternanSelectedList(new Set(tmpSelectedList));\n    }\n  }, []);\n\n  useEffect(()=>{\n    setInternalList(list)\n  },[list])\n\n  useEffect(()=>{\n    if(searchKey){\n      changeListValueBasedOnSearch(searchKey)\n      setInput(searchKey)\n    }\n  },[searchKey])\n\n  const changeListValueBasedOnSearch = (value) => {\n    if (value) {\n      let tmpArray = []\n      list.filter(val => {\n        if (val[labelName].toUpperCase().includes(value.toUpperCase())) {\n          tmpArray = [...tmpArray , val]\n        }\n      })\n      setInternalList(tmpArray)\n    }\n    else {\n      setInternalList(list)\n    }\n  }\n\n  const close = timeOut => {\n    setListOpen(false);\n    window.removeEventListener(\"mousedown\", close);\n  };\n\n  const toggleList = () => {\n    setListOpen(!listOpen);\n  };\n\n  \n\n  const handleInputChange = evt => {\n    let inputValue = evt.target.value\n    changeListValueBasedOnSearch(inputValue)\n    setListOpen(true);\n    setInput(inputValue);\n    inputChanged(inputValue);\n  };\n\n  const handleRemoveItem = index => {\n    return () => {\n      let tmpArray = internalSelectedList.filter((item, i) => i !== index);\n      setInternanSelectedList(tmpArray);\n      toggleItem(tmpArray);\n    };\n  };\n\n  const dropDownSelectedItem = item => {\n    let totalSelectedItem = [...internalSelectedList];\n    if (isSingle) {\n      totalSelectedItem = [item];\n      setInternanSelectedList(totalSelectedItem);\n    } else if (!selectedClassname(item)) {\n      totalSelectedItem.push(item);\n      setInternanSelectedList(totalSelectedItem);\n    } else {\n      totalSelectedItem.splice(totalSelectedItem.indexOf(item), 1);\n      setInternanSelectedList(totalSelectedItem);\n    }\n    setInput(\"\");\n    changeListValueBasedOnSearch(\"\")\n    toggleItem(totalSelectedItem);\n  };\n\n  const renderDropDownFn = internalList => {\n    return (\n      <div>\n        <ul\n          className=\"dd-list\"\n          onClick={e => e.stopPropagation()}\n          onMouseEnter={() => {\n            window.removeEventListener(\"mousedown\", close);\n          }}\n          onMouseLeave={() => {\n            window.addEventListener(\"mousedown\", close);\n          }}\n        >\n          {internalList.map((item, index) => renderDropDownSelectedItem(item, index))}\n        </ul>\n      </div>\n    );\n  };\n\n  const selectedClassname = item => {\n    return internalSelectedList.some(\n      internalList => internalList[labelName].toUpperCase() === item[labelName].toUpperCase()\n    );\n  };\n\n  const renderDropDownSelectedItem = (item, index) => {\n    return (\n      <div key={index}>\n        <li\n          className={\n            selectedClassname(item) ? \"dd-list-item selected\" : \"dd-list-item\"\n          }\n          style={selectedClassname(item) ? seletedBackgroundColor : {}}\n          key={index}\n          onClick={() => {\n            dropDownSelectedItem(item);\n          }}\n        >\n          {item[labelName]}\n        </li>\n      </div>\n    );\n  };\n\n  const seletedBackgroundColor = {\n    backgroundColor: selectedDropdownColor\n  }\n\n  const styles = {\n    container: {\n      padding: \"2px\",\n      margin: \"5px\"\n    },\n\n    items: {\n      color: \"white\",\n      display: \"inline-block\",\n      padding: \"2px\",\n      border: `1px solid ${tagColor}`,\n      backgroundColor: tagColor,\n      borderRadius: \"5px\",\n      margin: \"5px\",\n      cursor: \"pointer\"\n    },\n\n    input: {\n      outline: \"none\",\n      border: \"none\",\n      fontSize: \"12px\"\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"col-12\">\n        <div className=\"dd-wrapper\">\n          <div\n            className=\"dd-header\"\n            onClick={() => toggleList()}\n            onMouseEnter={() => {\n              window.removeEventListener(\"mousedown\", close);\n            }}\n            onMouseLeave={() => {\n              window.addEventListener(\"mousedown\", close);\n            }}\n          >\n            <label style={{ marginTop: \"5px\" }}>\n              <ul style={styles}>\n                {internalSelectedList.map((item, i) => (\n                  <li\n                    key={i}\n                    style={styles.items}\n                    onClick={handleRemoveItem(i)}\n                  >\n                    {item[selectedlabelName]}\n                    <span style={{ paddingLeft: \"5px\", color: \"white\" }}>\n                      X\n                    </span>\n                  </li>\n                ))}\n\n                <input\n                  className=\"col-12 dd-header dd-wrapper\"\n                  placeholder={placeholder}\n                  style={styles.input}\n                  value={input}\n                  onChange={handleInputChange}\n                />\n              </ul>\n            </label>\n          </div>\n          {listOpen ? renderDropDownFn(internalList) : null}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DropdownMultiple;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport ReactDropDown from \"./components/ReactDropDown\";\n\nfunction App() {\n  const list = [\n    {\n      name: \"End Game\",\n      value: \"End Game1\"\n    },\n    {\n      name: \"The Lion King\",\n      value: \"The Lion King\"\n    },\n    {\n      name: \"Spider-Man: Far From Home\",\n      value: \"Spider-Man: Far From Home\"\n    },\n    {\n      name: \"Captain Marvel\",\n      value: \"Captain Marvel\"\n    },\n    {\n      name: \"Jorker\",\n      value: \"Jorker\"\n    }\n  ];\n\n  const [singleSearchKey, setSingleSearchKey] = useState(\"\");\n  const [singleSelectedValue, setSingleSelectedValue] = useState([]);\n  const [multiSearchKey, setMultiSearchKey] = useState(\"\");\n  const [multiSelectedValue, setMultiSelectedValue] = useState([]);\n  const toggleItem = (val, isSingle) => {\n    if (isSingle) {\n      setSingleSelectedValue(val);\n    } else {\n      setMultiSelectedValue(val);\n    }\n  };\n  const handleInputChange = (val, isSingle) => {\n    if (isSingle) {\n      setSingleSearchKey(val);\n    } else {\n      setMultiSearchKey(val);\n    }\n  };\n\n  const setUpSingleSelectedItem = () => {\n    return singleSelectedValue.map((val, index)=>(\n      <div key={index}>\n        {index + 1} . {val.name}\n      </div>\n    ))\n  };\n\n  const setUpMultipleSelectedItem = () => {\n    return multiSelectedValue.map((val, index)=>(\n      <div key={index}>\n        {index + 1} {val.name}\n      </div>\n    ))\n  };\n\n  return (\n    <div className=\"container\">\n      <br />\n      <br />\n      <br />\n      <div>\n        <p>Single Select Dropdown</p>\n        <ReactDropDown\n          placeholder=\"Dropdown...\"\n          isSingle={true}\n          list={list}\n          labelName=\"name\"\n          selectedList={singleSelectedValue}\n          selectedlabelName=\"name\"\n          toggleItem={val => toggleItem(val, true)}\n          inputChanged={val => handleInputChange(val, true)}\n          searchKey={singleSearchKey}\n        />\n        <span>Searched Key : {singleSearchKey}</span>\n        <br />\n        {setUpSingleSelectedItem()}\n        <br />\n        <br />\n        <br />\n\n        <p>Multi Select Dropdown</p>\n        <ReactDropDown\n          placeholder=\"Dropdown...\"\n          isSingle={false}\n          list={list}\n          labelName=\"name\"\n          selectedList={multiSelectedValue}\n          selectedlabelName=\"name\"\n          toggleItem={val => toggleItem(val, false)}\n          inputChanged={val => handleInputChange(val, false)}\n          searchKey={multiSearchKey}\n        />\n        <span>Searched Key : {multiSearchKey}</span>\n        <br/>\n        {setUpMultipleSelectedItem()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}